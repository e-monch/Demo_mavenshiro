[main]
#如果认证没有通过时跳转的页面, 如果不指定默认为/login.jsp
authc.loginUrl=/login

#用户没有对应的角色时跳转的页面
roles.unauthorizedUrl=/nopermission.jsp

#用户没有对应的权限时跳转的页面
perms.unauthorizedUrl=/nopermission.jsp

#登出之后重定向的页面
logout.redirectUrl=/login

[users]
#admin 角色有特殊意义, 它拥有所有权限
xiaohong=123,admin
xiaoming=123,deptMgr

[roles]
#权限可以使用通配符 *, /abc 可以访问 /abc 下的所有资源, 相当于 /abc/*
user=/abc/department:view
deptMgr=/abc/department:*
boss=/abc

[urls]
#shiro内置11个拦截器, 优先级分别是 anon, authc, authcBasic, logout, noSessionCreation, perms, port, rest, roles, ssl, user
#配置方式为 请求路径=过滤器,过滤条件
#静态资源可以直接访问
/static/**=anon

#访问员工列表需要身份认证, 且需有 admin 角色
/employee=authc,roles[admin]

#访问部门列表需要身份认证, 且需有 department:view 权限
/department=authc,perms["department:view"]

#当请求 /logoutOut, 会被 logout 捕获并清除 session
/logout=logout

#所有请求都需要认证, 当请求路径为第三行配置的 authc.loginUrl 的路径时(不配置默认 /login.jsp), authc 拦截器会先拿请求中的 username,
#password(这两个参数名为默认值, 如果表单的 name 值不是这两个, 可以通过 authc.usernameParam=xxx, authc.passwordParam=xxx 来自定义
#指定) 参数和本配置文件中配置的用户密码进行比对, 或者从自定义的 realm 中进行比对, 如果有匹配的直接认为认证通过, 如果没有匹配的, 先抛出异
#常, 之后跳转到第三行配置的 authc.loginUrl 并执行该 servlet
/**=authc

#可以禁用某个拦截器
#perms.enabled=false